/**
 * @packageDocumentation
 * @module API-AVM-Vertex
 */
import { Buffer } from "buffer/";
import { TransferableOutput } from "./outputs";
import { TransferableInput } from "./inputs";
import { Serializable, SerializedEncoding } from "../../utils/serialization";
import { Address } from "../../common";
import BN from "bn.js";
import { BaseTx } from ".";
/**
 * Class representing a Vertex
 */
export declare class Vertex extends Serializable {
    protected _typeName: string;
    protected _codecID: number;
    protected out: TransferableOutput;
    protected ins: TransferableInput;
    protected numouts: TransferableOutput;
    protected numins: TransferableInput;
    deserialize(fields: object, encoding?: SerializedEncoding): void;
    protected chainID: Buffer;
    protected height: Buffer;
    protected epoch: Buffer;
    protected numParentIDs: Buffer;
    protected parentIDs: Buffer[];
    protected numTxs: Buffer;
    protected txs: BaseTx[];
    protected numRestrictions: Buffer;
    protected restrictions: Buffer[];
    /**
     * Returns the ChainID as a number
     */
    getChainID: () => number;
    /**
     * Returns the height as a {@link https://github.com/indutny/bn.js/|BN}.
     */
    getHeight: () => BN;
    /**
     * Returns the epoch as a number.
     */
    getEpoch: () => number;
    /**
     * @returns An array of Buffers
     */
    getParentIDs: () => Buffer[];
    /**
     * Returns array of UnsignedTxs.
     */
    getTxs: () => BaseTx[];
    /**
     * @returns An array of Buffers
     */
    getRestrictions: () => Buffer[];
    /**
     * Set the codecID
     *
     * @param codecID The codecID to set
     */
    setCodecID(codecID: number): void;
    /**
     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.
     *
     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]
     *
     * @returns The length of the raw [[BaseTx]]
     *
     * @remarks assume not-checksummed
     */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s
     *
     * @param msg A Buffer for the [[UnsignedTx]]
     * @param kc An [[KeyChain]] used in signing
     *
     * @returns An array of [[Credential]]s
     */
    /**
     * Class representing a BaseTx which is the foundation for all transactions.
     *
     * @param networkID Optional networkID, [[DefaultNetworkID]]
     * @param chainID Optional chainID, default Buffer.alloc(32, 16)
     */
    constructor(networkID?: number, chainID?: Buffer, height?: Buffer, epoch?: Buffer, parentIDs?: Address[], txs?: Buffer, numRestrictions?: Buffer, restrictions?: Address[]);
}
//# sourceMappingURL=vertex.d.ts.map