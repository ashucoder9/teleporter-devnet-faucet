"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vertex = void 0;
/**
 * @packageDocumentation
 * @module API-AVM-Vertex
 */
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("../../utils/bintools"));
const constants_1 = require("./constants");
const outputs_1 = require("./outputs");
const inputs_1 = require("./inputs");
const constants_2 = require("../../utils/constants");
const tx_1 = require("./tx");
const serialization_1 = require("../../utils/serialization");
const errors_1 = require("../../utils/errors");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
const serialization = serialization_1.Serialization.getInstance();
const decimalString = "decimalString";
const buffer = "Buffer";
const display = "display";
/**
 * Class representing a Vertex
 */
class Vertex extends serialization_1.Serializable {
    /**
     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s
     *
     * @param msg A Buffer for the [[UnsignedTx]]
     * @param kc An [[KeyChain]] used in signing
     *
     * @returns An array of [[Credential]]s
     */
    // sign(msg: Buffer, kc: KeyChain): Credential[] {
    //   const sigs: Credential[] = []
    //   for (let i: number = 0; i < this.ins.length; i++) {
    //     const cred: Credential = SelectCredentialClass(
    //       this.ins[`${i}`].getInput().getCredentialID()
    //     )
    //     const sigidxs: SigIdx[] = this.ins[`${i}`].getInput().getSigIdxs()
    //     for (let j: number = 0; j < sigidxs.length; j++) {
    //       const keypair: KeyPair = kc.getKey(sigidxs[`${j}`].getSource())
    //       const signval: Buffer = keypair.sign(msg)
    //       const sig: Signature = new Signature()
    //       sig.fromBuffer(signval)
    //       cred.addSignature(sig)
    //     }
    //     sigs.push(cred)
    //   }
    //   return sigs
    // }
    // clone(): this {
    //   let newbase: BaseTx = new BaseTx()
    //   newbase.fromBuffer(this.toBuffer())
    //   return newbase as this
    // }
    // create(...args: any[]): this {
    //   return new BaseTx(...args) as this
    // }
    // select(id: number, ...args: any[]): this {
    //   let newbasetx: BaseTx = SelectTxClass(id, ...args)
    //   return newbasetx as this
    // }
    /**
     * Class representing a BaseTx which is the foundation for all transactions.
     *
     * @param networkID Optional networkID, [[DefaultNetworkID]]
     * @param chainID Optional chainID, default Buffer.alloc(32, 16)
     */
    constructor(networkID = constants_2.DefaultNetworkID, chainID = buffer_1.Buffer.alloc(32), height = buffer_1.Buffer.alloc(8), epoch = buffer_1.Buffer.alloc(4), parentIDs = [], txs = buffer_1.Buffer.alloc(4), numRestrictions = buffer_1.Buffer.alloc(4), restrictions = []) {
        super();
        this._typeName = "Vertex";
        this._codecID = constants_1.AVMConstants.LATESTCODEC;
        this.out = new outputs_1.TransferableOutput();
        this.ins = new inputs_1.TransferableInput();
        this.numouts = new outputs_1.TransferableOutput();
        this.numins = new inputs_1.TransferableInput();
        this.chainID = buffer_1.Buffer.alloc(32);
        this.height = buffer_1.Buffer.alloc(8);
        this.epoch = buffer_1.Buffer.alloc(4);
        this.numParentIDs = buffer_1.Buffer.alloc(4);
        this.parentIDs = [];
        this.numTxs = buffer_1.Buffer.alloc(4);
        this.txs = [];
        this.numRestrictions = buffer_1.Buffer.alloc(4);
        this.restrictions = [];
        /**
         * Returns the ChainID as a number
         */
        this.getChainID = () => this.chainID.readUInt32BE(0);
        /**
         * Returns the height as a {@link https://github.com/indutny/bn.js/|BN}.
         */
        this.getHeight = () => bintools.fromBufferToBN(this.height);
        /**
         * Returns the epoch as a number.
         */
        this.getEpoch = () => this.epoch.readUInt32BE(0);
        /**
         * @returns An array of Buffers
         */
        this.getParentIDs = () => {
            return this.parentIDs;
        };
        /**
         * Returns array of UnsignedTxs.
         */
        this.getTxs = () => {
            return this.txs;
        };
        /**
         * @returns An array of Buffers
         */
        this.getRestrictions = () => {
            return this.restrictions;
        };
    }
    // serialize is inherited
    // TODO - implement deserialize
    deserialize(fields, encoding = "hex") {
        super.deserialize(fields, encoding);
        this.out = fields["outs"].map((o) => {
            let newOut = new outputs_1.TransferableOutput();
            newOut.deserialize(o, encoding);
            return newOut;
        });
        this.ins = fields["ins"].map((i) => {
            let newIn = new inputs_1.TransferableInput();
            newIn.deserialize(i, encoding);
            return newIn;
        });
        // this.numouts = serialization.decoder(
        //   this.out.length.toString(),
        //   display,
        //   decimalString,
        //   buffer,
        //   4
        // )
        // this.numins = serialization.decoder(
        //   this.ins.length.toString(),
        //   display,
        //   decimalString,
        //   buffer,
        //   4
        // )
    }
    /**
     * Set the codecID
     *
     * @param codecID The codecID to set
     */
    setCodecID(codecID) {
        if (codecID !== 0 && codecID !== 1) {
            /* istanbul ignore next */
            throw new errors_1.CodecIdError("Error - BaseTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        }
        this._codecID = codecID;
        this._typeID =
            this._codecID === 0 ? constants_1.AVMConstants.BASETX : constants_1.AVMConstants.BASETX_CODECONE;
    }
    /**
     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.
     *
     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]
     *
     * @returns The length of the raw [[BaseTx]]
     *
     * @remarks assume not-checksummed
     */
    fromBuffer(bytes, offset = 0) {
        offset += 2;
        this.chainID = bintools.copyFrom(bytes, offset, offset + 32);
        offset += 32;
        this.height = bintools.copyFrom(bytes, offset, offset + 8);
        offset += 8;
        this.epoch = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        this.numParentIDs = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const parentIDsCount = this.numParentIDs.readUInt32BE(0);
        for (let i = 0; i < parentIDsCount; i++) {
            const parentID = bintools.copyFrom(bytes, offset, offset + 32);
            offset += 32;
            this.parentIDs.push(parentID);
        }
        this.numTxs = bintools.copyFrom(bytes, offset, offset + 4);
        const txsCount = this.numTxs.readUInt32BE(0);
        offset += 4;
        // TODO - why do we have these 4 mystery bytes?
        offset += 4;
        for (let i = 0; i < txsCount; i++) {
            const unsignedTx = new tx_1.UnsignedTx();
            offset += unsignedTx.fromBuffer(bintools.copyFrom(bytes, offset));
            this.txs.push(unsignedTx.getTransaction());
        }
        this.numRestrictions = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const restrictionsCount = this.numRestrictions.readUInt32BE(0);
        for (let i = 0; i < restrictionsCount; i++) {
            const tx = bintools.copyFrom(bytes, offset, offset + 32);
            offset += 32;
            this.restrictions.push(tx);
        }
        return offset;
    }
}
exports.Vertex = Vertex;
//# sourceMappingURL=data:application/json;base64,